[project]
name = "quadrex"
version = "0.1.0"
description = "A modern personal finance tracking application built with Flask and HTMX"
authors = [
    { name = "Vikrant Rathore", email = "vikrant@example.com" }
]
license = { text = "GPLv3" }
readme = "README.md"
requires-python = ">=3.12"
keywords = ["finance", "budget", "tracking", "flask", "htmx"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Flask",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU General Public License v3.0",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Accounting",
]

dependencies = [
    "flask-sqlalchemy==3.0.2",
    "flask==2.2.5",
    "flask-migrate==4.0.4",
    "flask-login==0.6.2",
    "flask-wtf==1.1.1",
    "email-validator==2.0.0.post2",
    "python-dotenv==1.0.0",
    "werkzeug==2.2.3",
    "ruff>=0.8.1",
]

[project.urls]
Homepage = "https://github.com/eonseed/quadrex"
Documentation = "https://github.com/eonseed/quadrex#readme"
Repository = "https://github.com/eonseed/quadrex.git"
Issues = "https://github.com/eonseed/quadrex/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
    "app/**/*.py",
    "app/**/*.html",
    "app/**/*.css",
    "app/**/*.js",
]
exclude = [
    "tests/**",
    "**/__pycache__",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long - let black handle this
]

[tool.ruff.isort]
known-first-party = ["app"]
combine-as-imports = true

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use assertions and relative imports
"tests/**/*" = ["S101", "TID252"]

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["error"]

[tool.coverage.run]
source = ["app"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
